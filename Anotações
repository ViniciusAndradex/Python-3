Aula 01 / 05
Aspas simples para menssagens: ('') ; Toda função tá entre parenteses.
Concatenar = + ou ,: + string - string e , any.

Variáveis: 
    (Objeto)identificador = 'informaãço'
leitura:
    identificador = input('pergunta')
leitura com tipos primitivos:
    int(input('pergunta'))

Aula 06 / Tipos Primitivos
Tipos primitivos:
    int : Inteiro
    float : Ponto flutuante
    bool : True || False
    str : String

Prints:
    print('ola {}'.format(s))
    print('Ola' + s)
    print('Ola', ola)
    print(f'Ola {s}') //A melhor!!!

Funções:
    type(): O tipo primitivo da variavel
    Métodos de teste de tipo:
        var.isNumeric() = é possivel converter para numero?
        var.isalpha()= é letra?
        var.isalnum() = é letra e numero?
        var.isupper() = esta maiusculo?
        OBS: aind temos muitos outros!
        OBS1: a var é um objeto pois o python trabalha com POO!

Aula 07 / Operadores Aritéticos
    | + | - | * | / | ** | // | % |  "==" <- IGUAL
    Precedência:
       1 | () |
       2 | ** |
       3 | *  | / | // | % |
       4 | +  | - |

    Operadores com Strings:
        É possível utilizar do artificios da multiplicação (*) como um multiplicador de string.
        Exemplo: print('Oi' * 5)

    Alinhamentos:
        {var:>20}: Exibe o var em 20 espaços a direita
        {var:<20}: Exibe o var em 20 espaços a esquerda
        {var:^20}: Exibe o var em 20 espaços e deixa no meio a var
        {var:=^20}: Exibe o var em 20 espaços com '='ao redor da var ou de acordo com a posição escolhida.

    Quebra ou não de linha:
        print('afsafa', end='' o que estiver aqui dentro aparece no lugar de quebrar a proxima')

    OBS: Em python o limite de um tipo primitivo é o tamanho da memória do pc.
    OBS1: Também é possível utilizar funções internas como o pow(a,2) porém a ordem de precedência é
            quebrada.
    Dica: Crie uma var com resultado somente se esse valor for ser reutilizado caso não, não crie!!

    Aula 08 / Módulos
    import: import + nomeModulo
    from-import: from + nomeModulo + import + função, função...

    OBS: ao utilizar o from não se faz necessario utilizar o nomeModulo.função apenas o nome da função
        já funciona.
    math:
        ceil: arredonda para cima
        floor: arredonda para baixo
        trunc: truncar
        pow: exponencial
        sqrt: raiz
        factorial: fatorial

    Acesso as bibliotecas:
        https://www.python.org/
        - Em documentation é possível ver as bibliotecas padrões para importação.
        - Pypi: Aqui estão disponiveis as bibliotecas da comunidade.

        OBS: é póssivel mascarar uma var na hora de imprimir com int() por exemplo.
        OBS: estudar a classe random.
        OBS: Em settings -> project -> python interpreter é possível identificar o que está instalado.

Aula 9 / Manipulando Strings:
    frase = 'Curso em Video'
    Fatiamento:
        frase[9]: 'V'
        frase[9:13]: 'Vide'
        frase[9:21]: 'Video Python' //Não é recomendado pois está ultrapassando o range.
        frase[9:21:2]: 'VdoPto'
        frase[:5] //ate 5: 'Curso'
        frase[15:]//ate o final: 'Python'
        frase[9::3]: 'VePh'
        OBS: python sempre exclui o ultimo número, ou seja, a faixa de valor sempre é menos 1
    Analise:
        len(frase): Comprimento (21).
        frase.count('o'): contar numero de letras (3).
        frase.count('o',0,13): contagem de 'o' com o fatiamento (1).
        frase.(r/l)find('deo'): indica a posição da letra inicial da string (11).
        frase.find('Android'): não existe (-1).
        [funcionalidade] 'Curso' in frase: indica True or False de acordo com a string analisada (True)
    Transformação:
        frase.replace('Python', 'Android'): Substitui a primeira String pela segunda (não permanente, a não ser que uma
                        String receba), ('Curso em Video Android')
        frase.upper() //é um método e portanto tem que ter os parênteses.: transforma em maiuscula, ('CURSO EM VIDEO PYTHON')
        frase.lower(): tranforma em minusculo, ('curso em video python')
        frase.capitalize: tranforma a primeira letra da primeira palvra em maiuscula o resto em minuscula, (Curso em video python)
        frase.title(): Analisa o numero de palavra de acordo com os espaços e tranforma a primeira letra de cada um, ('Curso em Video Python')

        frase = '   Aprenda Python   '
        frase.strip(): exclui espaços inuteis, 'Aprenda Python'
        frase.rstrip(): exclui espaços inuteis a direita, '   Aprenda Python'
        frase.lstrip(): exclui espaços inuteis a esquerda, 'Aprenda Python   '
    Divisão:
        frase = 'Curso em Video'
        frase.split(): A cada espaço ele separa as palavras e cada palavra recebe novos indices criando uma lista,
                        ['Curso', 'em', 'Video', 'Python']
                            0       1       2       3
    Junção:
        '-'.join(frase): com um lista é possivel juntar as palavras através do join, o simbolo entre os parenteses ficaram
                        na posição de junção dos mesmos,(Curso-em-Video-Python)

    OBS: Para impressão de frases longas utilize """ 54564654
                                                      456454645"""
    OBS: Strings sõ imutaveis.

Aula 10 / Condições:
    if condição:
        bloco
    else:
        bloco

    Condição ternária  (Opção de python): print('carro' if tempo <= else 'carro velho')

    from datetime import date -> date.today().year -> captura o ano atual da sua máquina

    OBS: ''' ''' também é um comentário.

Aula 11 / Cores no terminal
    ANSI para cores:
        \033[{codigo das cores{Separado por ;}}m
        Style:
            0: none
            1: negrito
            4: sublinhado
            0: inverte
        Text:
            30: Branco
            31: Vermelho
            32: Verde
            33: Amarelo
            34: Azul
            35: Majenta
            36: Ciano
            37: Cinza
        Back:
            40: Branco
            41: Vermelho
            42: Verde
            43: Amarelo
            44: Azul
            45: Majenta
            46: Ciano
            47: Cinza

Aula 12 / Condições Aninhadas:
    if condição:
        bloco
    elif condição:
        bloco
    else:
        bloco

Aula 13 / Estrutura de repetição for:
    ATUALIZAÇÃO: https://host2b.net/como-instalar-o-python-3-9-no-ubuntu-20-04/

    for c in range(n, n - 1):
        bloco
    for c in range (n, n, incremento se quiser): (decrescente)
        bloco

Aula 14 / Estrutura de repetição while:
    while condiçao:
        bloco

Aula 15 / Interrompendo repetições while:
    infinity loop (do/while):
        while True:
            bloco
                break (encerra o loop)

Aula 16 / Variaveis Compostas - Tuplas:
    Indice: 0-n
    Acesso: VAR[fatiamento]
    Métodos:
        len()
        sorted()
        count()
        index(item) #OBS: Caso exista mais de um item ele apresenta o indice do primeiro
        index(item, deslocamento) # Deslocamento indica de onde ele deve começar a procurar
        del coleção # único método que consegue mutar as tuplas.
        min()
        max()
    Laço:
        for c in lanche: <- vai percorrer todos os elementos de lanche (for-each)
        Apresentação:
            for cont in range(0, len(lanche)):
                print(f' 1 - Eu vou comer {lanche[cont]}, na posição {cont}')
            for c in lanche:
                print(f'2 - Eu vou comer {c}')
            for pos, c in enumerate(lanche):
                print(f'2 - Eu vou comer {c}, na posição {pos}')
    Declaração:
        var = ('', '', '')
    Utilities:
        a = (1, 2)
        b = (2, 3)
        c = a + b ->>>>>> (1, 2, 2, 3) <--- cria uma terceira juntando mas não modifica as existentes, a ordem importa.
    OBS: As tuplas são imutáveis, definido no começo a coleção permanece.
    OBS: No python 3 não tem mais a necessidade de por () para criar tuplas, porém, fica mais explicito em caso de
         dúvidas.

Aula 17 / Listas:
    Declaração:
        var = [] ou list()
    Métodos:
        var.append(): Adiciona ao final da lista.
        var.insert(pos, item): Adiciona na posição
        del var[pos]: elimina posição.
        var.pop(): Elimina o último elemento, se quiser pode adicionar o index quqe quer eliminar.
        var.remove(conteúdo): remove o elemento, caso tenha mais de um elemento elimina o primeiro.
        var.sort(): Organiza a lista.
        var.sort(reverse=True): Lista organizada ao contrário.
        len(var)
        Copiar listas:
            a = [1, 2]
            b = a[:]
        OBS: O python já ajeita os index.
    Estruturas:
        if conteudo in var:
            var.remove(conteudo) <- utilizado para evitar erros, como por exemplo o conteudo não estar na lista
        ranges:
            var = list(range(4, 11)) <- cria a lista com os valores de range.
    OBS: Listas são mutavéis.
    OBS: As em python ao atribuir uma lista a outra você não está copiando uma para a outra na realidade você está
         ligando as duas.

Aula 18 / Lista (Parte 2):
    Declaração Listas dentro de Listas:
        lista.append(lista2[:]) <- copia uma lista dentro de um lista.
        Representação manual:
            pessoa = [['João', 25], ['Mario', 32]]
                        [0     1]       [0      1]
                        [   0   ]      [   1    ]
    Dados:
        print(pessoa[0][0]) <- joão
        print(pessoa[1][0]) <- 25
        print(pessoa[1]) <- ['Mario', 32]
    Métodos:
        lista.clear(): apaga os itens da lista.
        sorted(lista)

Aula 19 / Dicionario:
    Declaração: {}, dict
        dados = ['Pedro', 25]
        d = {'nome': 'Pedro, 'idade': 25}
        print(d['nome'])
        print(d['idade'])
    Métodos:
        dados['sexo'] = 'M'
        del dados['idade']
        dict.copy()
        sorted(dict.items(), key=itemgetter[import operator](posição para comparação)): Desta forma ele ordena na crescente
        sorted(dict.items(), key=itemgetter[import operator](posição para comparação), reverse=True):
        desta forma ele ordena na decrescente
        OBS: Resultado est'a em forma de lista!
        Exemplo:
            filme = {'titulo': 'Star Wars', 'ano': 1977, 'diretor': 'George Lucas'}
            print(filme.values()) <- Valores!
            print(filme.keys()) <- identificador!
            print(filme.items()) <- os dois!
            OBS: Key ou chave: Nome do identificador.
    Estruturas:
        for k, v in filme.items():
            print(f'O (k) é (v)') <- k = identificador e v = valores
        for e in brasil1:
            print(f'{e["sigla"]}: {e["uf"]}')
            for k, v in e.items():
                print(f'        {k}: {v}')

        locadora = [filme] uma lista de dicionarios.
        print(locadora[0]['ano]')
    OBS: para criarmos listas de dicionarios é necessário passar uma copia para a lista ou então haverá uma ligação e
         ficara tudo igual.
    OBS: Para a utilização de data também é possível utilizar o datetime.now().year

Aula 20 / Funções:
    Função: São rotinas e no python as funções são definidas por ().
    Declaração:
        def nome():
        exemplo:
            def mostraLinha():
                print('-' * 15)
            mostraLinha()
    Parâmetros:
        def menssagem(msg):
            print('-' * 30)
            print(msg)
        #principal
        menssagem('Sistema de Alunos ')
    Empacotar Parâmetros:
        def contador(*num): <- A função irá receber quantos número quanto o necessário, Ele ficara como uma tupla.
        Para passar uma lista não a necessidade de nenhuma função especial basta criar a lista e passar de forma direta.
    OBS: no python é exigido a diferença de duas linhas da sua função para o programa principal.
    OBS: Quanto parametrizar é possível indicar qual indice é qual na hora de chamar apenas com nome do parâmetro=.
    OBS: Python sempre passa os valores por referência.
    OBS: Em casa de haver travamento com a função sleep nas funções, o recomendado é por um flush = True pois
         o buffer fica travado sem o mesmo e só exibe o final.

Aula 21 / Funções (Parte 2)
    | Interactive Help | docstrings | Argumentos Opcionais | Escopo de Variáveis | Retorno de resultados |
    Documentação:
        Interactive Help:
            python console:
                help() - Manual (quit sai):
                                Ao entrar no prompet help é possível ver a documentação da função, para tirar dúvidas e etc.

            else:
                ambiente qualquer help(function).
        docstring:
            print(function.__doc__)
    Criar a propria documentação (DOCSTRING):
        def var():
            """
            Tudo oque está aqui dentro será impresso no meu help
            o que facilita na utilização de terceiros.
            """
    Parâmetros Opcionais:
        Conceito:
            Consiste em inicializar meu parâmetros com o objetivo dele não quebrar caso algum
            dos parâmetros não seja passado.
        Exemplo:
            def somar(a=0, b=b, c=0):
                s = a + b + c
                print(s)
    Escopo de Variáveis:
        Lembrando que as variáveis da função o escopo é local e não funciona no principal.
        OBS: no python é possível criar variáveis com o mesmo nome e é preciso tomar cuidado pois isso ocorre
             em situações em que o escopo da nova var é local e portanto cria uma nova variável.
        Para tratar um global dentro da função?
            global var: ao utilizar qualquer modificação será em todos os locais.
    Retorno de resultados:
        return: não a necessidade de indicar o tipo de return no python e portanto basta return um valor.
