Aula 01 / 05
Aspas simples para menssagens: ('') ; Toda função tá entre parenteses.
Concatenar = + ou ,: + string - string e , any.

Variáveis: 
    (Objeto)identificador = 'informaãço'
leitura:
    identificador = input('pergunta')
leitura com tipos primitivos:
    int(input('pergunta'))

Aula 06 / Tipos Primitivos
Tipos primitivos:
    int : Inteiro
    float : Ponto flutuante
    bool : True || False
    str : String

Prints:
    print('ola {}'.format(s))
    print('Ola' + s)
    print('Ola', ola)
    print(f'Ola {s}') //A melhor!!!

Funções:
    type(): O tipo primitivo da variavel
    Métodos de teste de tipo:
        var.isNumeric() = é possivel converter para numero?
        var.isalpha()= é letra?
        var.isalnum() = é letra e numero?
        var.isupper() = esta maiusculo?
        OBS: aind temos muitos outros!
        OBS1: a var é um objeto pois o python trabalha com POO!

Aula 07 / Operadores Aritéticos
    | + | - | * | / | ** | // | % |  "==" <- IGUAL
    Precedência:
       1 | () |
       2 | ** |
       3 | *  | / | // | % |
       4 | +  | - |

    Operadores com Strings:
        É possível utilizar do artificios da multiplicação (*) como um multiplicador de string.
        Exemplo: print('Oi' * 5)

    Alinhamentos:
        {var:>20}: Exibe o var em 20 espaços a direita
        {var:<20}: Exibe o var em 20 espaços a esquerda
        {var:^20}: Exibe o var em 20 espaços e deixa no meio a var
        {var:=^20}: Exibe o var em 20 espaços com '='ao redor da var ou de acordo com a posição escolhida.

    Quebra ou não de linha:
        print('afsafa', end=' o que estiver aqui dentro aparece no lugar de quebrar a proxima')

    OBS: Em python o limite de um tipo primitivo é o tamanho da memória do pc.
    OBS1: Também é possível utilizar funções internas como o pow(a,2) porém a ordem de precedência é
            quebrada.
    Dica: Crie uma var com resultado somente se esse valor for ser reutilizado caso não, não crie!!

    Aula 08 / Módulos
    import: import + nomeModulo
    from-import: from + nomeModulo + import + função, função...

    OBS: ao utilizar o from não se faz necessario utilizar o nomeModulo.função apenas o nome da função
        já funciona.
    math:
        ceil: arredonda para cima
        floor: arredonda para baixo
        trunc: truncar
        pow: exponencial
        sqrt: raiz
        factorial: fatorial

    Acesso as bibliotecas:
        https://www.python.org/
        - Em documentation é possível ver as bibliotecas padrões para importação.
        - Pypi: Aqui estão disponiveis as bibliotecas da comunidade.
        OBS: estudar a classe random.
        OBS: Em settings -> project -> python interpreter é possível identificar o que está instalado.
